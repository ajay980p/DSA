bool searchInARotatedSortedArrayII(vector<int>& A, int key) {
    int start = 0;
    int end = A.size() - 1;

    while (start <= end) {
        int mid = (start + end) / 2;

        // If element is present at the mid
        if (key == A[mid]) {
            return true;
        }

        // Checking for left sorting
        else if (A[start] <= A[mid]) {
            if (A[start] <= key && key <= A[mid]) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }

        // Checking for Right sorting
        else {
            if (A[mid] <= key && key <= A[end]) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
    }

    return false;
}
